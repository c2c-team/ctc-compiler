
// Generated from ctc.g4 by ANTLR 4.13.1


#include "ctcLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CtcLexerStaticData final {
  CtcLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CtcLexerStaticData(const CtcLexerStaticData&) = delete;
  CtcLexerStaticData(CtcLexerStaticData&&) = delete;
  CtcLexerStaticData& operator=(const CtcLexerStaticData&) = delete;
  CtcLexerStaticData& operator=(CtcLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag ctclexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CtcLexerStaticData *ctclexerLexerStaticData = nullptr;

void ctclexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (ctclexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(ctclexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CtcLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
      "T__49", "IntegerConstant", "BinaryConstant", "DecimalConstant", "OctalConstant", 
      "HexadecimalConstant", "HexadecimalPrefix", "NonzeroDigit", "OctalDigit", 
      "HexadecimalDigit", "IntegerSuffix", "UnsignedSuffix", "LongSuffix", 
      "LongLongSuffix", "FloatingConstant", "DecimalFloatingConstant", "HexadecimalFloatingConstant", 
      "FractionalConstant", "ExponentPart", "Sign", "DigitSequence", "HexadecimalFractionalConstant", 
      "BinaryExponentPart", "HexadecimalDigitSequence", "FloatingSuffix", 
      "CharacterConstant", "CCharSequence", "CChar", "EscapeSequence", "SimpleEscapeSequence", 
      "OctalEscapeSequence", "HexadecimalEscapeSequence", "EncodingPrefix", 
      "SCharSequence", "SChar", "Digit_sequence", "Identifier_non_digit", 
      "Digit", "Public", "Private", "Interface", "Class", "Enum", "Using", 
      "Namespace", "Inline", "Noexcept", "Use", "Compile_if", "Static", 
      "Extern", "Constexpr", "Consteval", "Dynamic_cast", "Void", "Auto", 
      "Char", "Bool", "Short", "Int", "Long", "Float", "Double", "Double128", 
      "Unsigned", "Const", "Volatile"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'('", "')'", "';'", "'{'", "'}'", "','", "'!'", "'<'", "'>'", 
      "'&'", "'this'", "'['", "']'", "'fun'", "'*'", "'/'", "'%'", "'+'", 
      "'-'", "'<<'", "'>>'", "'<='", "'>='", "'=='", "'!='", "'^'", "'|'", 
      "'&&'", "'||'", "'\\u003F'", "':'", "'\"'", "'='", "'*='", "'/='", 
      "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", 
      "'.'", "'->'", "'++'", "'--'", "'~'", "'sizeof'", "'::'", "", "", 
      "'public'", "'private'", "'interface'", "'class'", "'enum'", "'using'", 
      "'namespace'", "'inline'", "'noexcept'", "'use'", "'compile_if'", 
      "'static'", "'extern'", "'constexpr'", "'consteval'", "'dynamic_cast'", 
      "'void'", "'auto'", "'char'", "'bool'", "'short'", "'int'", "'long'", 
      "'float'", "'double'", "'double128'", "'unsigned'", "'const'", "'volatile'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "DigitSequence", "Digit_sequence", "Public", "Private", "Interface", 
      "Class", "Enum", "Using", "Namespace", "Inline", "Noexcept", "Use", 
      "Compile_if", "Static", "Extern", "Constexpr", "Consteval", "Dynamic_cast", 
      "Void", "Auto", "Char", "Bool", "Short", "Int", "Long", "Float", "Double", 
      "Double128", "Unsigned", "Const", "Volatile"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,81,815,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,1,0,
  	1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
  	9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,
  	1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,
  	1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,
  	1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,
  	1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,
  	1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,
  	1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,45,
  	1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
  	1,49,1,49,1,49,1,50,1,50,3,50,370,8,50,1,50,1,50,3,50,374,8,50,1,50,1,
  	50,3,50,378,8,50,1,50,3,50,381,8,50,1,51,1,51,1,51,4,51,386,8,51,11,51,
  	12,51,387,1,52,1,52,5,52,392,8,52,10,52,12,52,395,9,52,1,53,1,53,5,53,
  	399,8,53,10,53,12,53,402,9,53,1,54,1,54,4,54,406,8,54,11,54,12,54,407,
  	1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,3,59,421,8,59,
  	1,59,1,59,1,59,1,59,1,59,3,59,428,8,59,1,59,1,59,3,59,432,8,59,3,59,434,
  	8,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,62,3,62,444,8,62,1,63,1,63,
  	3,63,448,8,63,1,64,1,64,3,64,452,8,64,1,64,3,64,455,8,64,1,64,1,64,1,
  	64,3,64,460,8,64,3,64,462,8,64,1,65,1,65,1,65,3,65,467,8,65,1,65,1,65,
  	3,65,471,8,65,1,66,3,66,474,8,66,1,66,1,66,1,66,1,66,1,66,3,66,481,8,
  	66,1,67,1,67,3,67,485,8,67,1,67,1,67,1,68,1,68,1,69,4,69,492,8,69,11,
  	69,12,69,493,1,70,3,70,497,8,70,1,70,1,70,1,70,1,70,1,70,3,70,504,8,70,
  	1,71,1,71,3,71,508,8,71,1,71,1,71,1,72,4,72,513,8,72,11,72,12,72,514,
  	1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
  	1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,541,8,74,1,75,
  	4,75,544,8,75,11,75,12,75,545,1,76,1,76,3,76,550,8,76,1,77,1,77,1,77,
  	3,77,555,8,77,1,78,1,78,1,78,1,79,1,79,1,79,3,79,563,8,79,1,79,3,79,566,
  	8,79,1,80,1,80,1,80,1,80,4,80,572,8,80,11,80,12,80,573,1,81,1,81,1,81,
  	3,81,579,8,81,1,82,4,82,582,8,82,11,82,12,82,583,1,83,1,83,1,83,1,83,
  	1,83,1,83,1,83,3,83,593,8,83,1,84,4,84,596,8,84,11,84,12,84,597,1,85,
  	1,85,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,
  	1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
  	1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,
  	1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,94,
  	1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
  	1,95,1,96,1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
  	1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,
  	1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
  	1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,103,
  	1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,
  	1,105,1,105,1,106,1,106,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,107,
  	1,107,1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,110,1,110,
  	1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,112,
  	1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,113,1,113,1,113,
  	1,113,1,113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,114,
  	1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,0,0,116,1,1,3,2,
  	5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
  	55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
  	39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
  	101,0,103,0,105,0,107,0,109,0,111,0,113,0,115,0,117,0,119,0,121,0,123,
  	0,125,0,127,0,129,0,131,0,133,0,135,0,137,0,139,51,141,0,143,0,145,0,
  	147,0,149,0,151,0,153,0,155,0,157,0,159,0,161,0,163,0,165,0,167,0,169,
  	52,171,0,173,0,175,53,177,54,179,55,181,56,183,57,185,58,187,59,189,60,
  	191,61,193,62,195,63,197,64,199,65,201,66,203,67,205,68,207,69,209,70,
  	211,71,213,72,215,73,217,74,219,75,221,76,223,77,225,78,227,79,229,80,
  	231,81,1,0,18,2,0,66,66,98,98,1,0,48,49,2,0,88,88,120,120,1,0,49,57,1,
  	0,48,55,3,0,48,57,65,70,97,102,2,0,85,85,117,117,2,0,76,76,108,108,2,
  	0,69,69,101,101,2,0,43,43,45,45,2,0,80,80,112,112,4,0,70,70,76,76,102,
  	102,108,108,4,0,10,10,13,13,39,39,92,92,10,0,34,34,39,39,63,63,92,92,
  	97,98,102,102,110,110,114,114,116,116,118,118,3,0,76,76,85,85,117,117,
  	4,0,10,10,13,13,34,34,92,92,3,0,65,90,95,95,97,122,1,0,48,57,827,0,1,
  	1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
  	0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
  	1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
  	0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
  	0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
  	1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
  	0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
  	0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
  	1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,
  	0,0,0,99,1,0,0,0,0,139,1,0,0,0,0,169,1,0,0,0,0,175,1,0,0,0,0,177,1,0,
  	0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,1,0,
  	0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,0,197,1,0,
  	0,0,0,199,1,0,0,0,0,201,1,0,0,0,0,203,1,0,0,0,0,205,1,0,0,0,0,207,1,0,
  	0,0,0,209,1,0,0,0,0,211,1,0,0,0,0,213,1,0,0,0,0,215,1,0,0,0,0,217,1,0,
  	0,0,0,219,1,0,0,0,0,221,1,0,0,0,0,223,1,0,0,0,0,225,1,0,0,0,0,227,1,0,
  	0,0,0,229,1,0,0,0,0,231,1,0,0,0,1,233,1,0,0,0,3,235,1,0,0,0,5,237,1,0,
  	0,0,7,239,1,0,0,0,9,241,1,0,0,0,11,243,1,0,0,0,13,245,1,0,0,0,15,247,
  	1,0,0,0,17,249,1,0,0,0,19,251,1,0,0,0,21,253,1,0,0,0,23,258,1,0,0,0,25,
  	260,1,0,0,0,27,262,1,0,0,0,29,266,1,0,0,0,31,268,1,0,0,0,33,270,1,0,0,
  	0,35,272,1,0,0,0,37,274,1,0,0,0,39,276,1,0,0,0,41,279,1,0,0,0,43,282,
  	1,0,0,0,45,285,1,0,0,0,47,288,1,0,0,0,49,291,1,0,0,0,51,294,1,0,0,0,53,
  	296,1,0,0,0,55,298,1,0,0,0,57,301,1,0,0,0,59,304,1,0,0,0,61,306,1,0,0,
  	0,63,308,1,0,0,0,65,310,1,0,0,0,67,312,1,0,0,0,69,315,1,0,0,0,71,318,
  	1,0,0,0,73,321,1,0,0,0,75,324,1,0,0,0,77,327,1,0,0,0,79,331,1,0,0,0,81,
  	335,1,0,0,0,83,338,1,0,0,0,85,341,1,0,0,0,87,344,1,0,0,0,89,346,1,0,0,
  	0,91,349,1,0,0,0,93,352,1,0,0,0,95,355,1,0,0,0,97,357,1,0,0,0,99,364,
  	1,0,0,0,101,380,1,0,0,0,103,382,1,0,0,0,105,389,1,0,0,0,107,396,1,0,0,
  	0,109,403,1,0,0,0,111,409,1,0,0,0,113,412,1,0,0,0,115,414,1,0,0,0,117,
  	416,1,0,0,0,119,433,1,0,0,0,121,435,1,0,0,0,123,437,1,0,0,0,125,443,1,
  	0,0,0,127,447,1,0,0,0,129,461,1,0,0,0,131,463,1,0,0,0,133,480,1,0,0,0,
  	135,482,1,0,0,0,137,488,1,0,0,0,139,491,1,0,0,0,141,503,1,0,0,0,143,505,
  	1,0,0,0,145,512,1,0,0,0,147,516,1,0,0,0,149,540,1,0,0,0,151,543,1,0,0,
  	0,153,549,1,0,0,0,155,554,1,0,0,0,157,556,1,0,0,0,159,559,1,0,0,0,161,
  	567,1,0,0,0,163,578,1,0,0,0,165,581,1,0,0,0,167,592,1,0,0,0,169,595,1,
  	0,0,0,171,599,1,0,0,0,173,601,1,0,0,0,175,603,1,0,0,0,177,610,1,0,0,0,
  	179,618,1,0,0,0,181,628,1,0,0,0,183,634,1,0,0,0,185,639,1,0,0,0,187,645,
  	1,0,0,0,189,655,1,0,0,0,191,662,1,0,0,0,193,671,1,0,0,0,195,675,1,0,0,
  	0,197,686,1,0,0,0,199,693,1,0,0,0,201,700,1,0,0,0,203,710,1,0,0,0,205,
  	720,1,0,0,0,207,733,1,0,0,0,209,738,1,0,0,0,211,743,1,0,0,0,213,748,1,
  	0,0,0,215,753,1,0,0,0,217,759,1,0,0,0,219,763,1,0,0,0,221,768,1,0,0,0,
  	223,774,1,0,0,0,225,781,1,0,0,0,227,791,1,0,0,0,229,800,1,0,0,0,231,806,
  	1,0,0,0,233,234,5,40,0,0,234,2,1,0,0,0,235,236,5,41,0,0,236,4,1,0,0,0,
  	237,238,5,59,0,0,238,6,1,0,0,0,239,240,5,123,0,0,240,8,1,0,0,0,241,242,
  	5,125,0,0,242,10,1,0,0,0,243,244,5,44,0,0,244,12,1,0,0,0,245,246,5,33,
  	0,0,246,14,1,0,0,0,247,248,5,60,0,0,248,16,1,0,0,0,249,250,5,62,0,0,250,
  	18,1,0,0,0,251,252,5,38,0,0,252,20,1,0,0,0,253,254,5,116,0,0,254,255,
  	5,104,0,0,255,256,5,105,0,0,256,257,5,115,0,0,257,22,1,0,0,0,258,259,
  	5,91,0,0,259,24,1,0,0,0,260,261,5,93,0,0,261,26,1,0,0,0,262,263,5,102,
  	0,0,263,264,5,117,0,0,264,265,5,110,0,0,265,28,1,0,0,0,266,267,5,42,0,
  	0,267,30,1,0,0,0,268,269,5,47,0,0,269,32,1,0,0,0,270,271,5,37,0,0,271,
  	34,1,0,0,0,272,273,5,43,0,0,273,36,1,0,0,0,274,275,5,45,0,0,275,38,1,
  	0,0,0,276,277,5,60,0,0,277,278,5,60,0,0,278,40,1,0,0,0,279,280,5,62,0,
  	0,280,281,5,62,0,0,281,42,1,0,0,0,282,283,5,60,0,0,283,284,5,61,0,0,284,
  	44,1,0,0,0,285,286,5,62,0,0,286,287,5,61,0,0,287,46,1,0,0,0,288,289,5,
  	61,0,0,289,290,5,61,0,0,290,48,1,0,0,0,291,292,5,33,0,0,292,293,5,61,
  	0,0,293,50,1,0,0,0,294,295,5,94,0,0,295,52,1,0,0,0,296,297,5,124,0,0,
  	297,54,1,0,0,0,298,299,5,38,0,0,299,300,5,38,0,0,300,56,1,0,0,0,301,302,
  	5,124,0,0,302,303,5,124,0,0,303,58,1,0,0,0,304,305,5,63,0,0,305,60,1,
  	0,0,0,306,307,5,58,0,0,307,62,1,0,0,0,308,309,5,34,0,0,309,64,1,0,0,0,
  	310,311,5,61,0,0,311,66,1,0,0,0,312,313,5,42,0,0,313,314,5,61,0,0,314,
  	68,1,0,0,0,315,316,5,47,0,0,316,317,5,61,0,0,317,70,1,0,0,0,318,319,5,
  	37,0,0,319,320,5,61,0,0,320,72,1,0,0,0,321,322,5,43,0,0,322,323,5,61,
  	0,0,323,74,1,0,0,0,324,325,5,45,0,0,325,326,5,61,0,0,326,76,1,0,0,0,327,
  	328,5,60,0,0,328,329,5,60,0,0,329,330,5,61,0,0,330,78,1,0,0,0,331,332,
  	5,62,0,0,332,333,5,62,0,0,333,334,5,61,0,0,334,80,1,0,0,0,335,336,5,38,
  	0,0,336,337,5,61,0,0,337,82,1,0,0,0,338,339,5,94,0,0,339,340,5,61,0,0,
  	340,84,1,0,0,0,341,342,5,124,0,0,342,343,5,61,0,0,343,86,1,0,0,0,344,
  	345,5,46,0,0,345,88,1,0,0,0,346,347,5,45,0,0,347,348,5,62,0,0,348,90,
  	1,0,0,0,349,350,5,43,0,0,350,351,5,43,0,0,351,92,1,0,0,0,352,353,5,45,
  	0,0,353,354,5,45,0,0,354,94,1,0,0,0,355,356,5,126,0,0,356,96,1,0,0,0,
  	357,358,5,115,0,0,358,359,5,105,0,0,359,360,5,122,0,0,360,361,5,101,0,
  	0,361,362,5,111,0,0,362,363,5,102,0,0,363,98,1,0,0,0,364,365,5,58,0,0,
  	365,366,5,58,0,0,366,100,1,0,0,0,367,369,3,105,52,0,368,370,3,119,59,
  	0,369,368,1,0,0,0,369,370,1,0,0,0,370,381,1,0,0,0,371,373,3,107,53,0,
  	372,374,3,119,59,0,373,372,1,0,0,0,373,374,1,0,0,0,374,381,1,0,0,0,375,
  	377,3,109,54,0,376,378,3,119,59,0,377,376,1,0,0,0,377,378,1,0,0,0,378,
  	381,1,0,0,0,379,381,3,103,51,0,380,367,1,0,0,0,380,371,1,0,0,0,380,375,
  	1,0,0,0,380,379,1,0,0,0,381,102,1,0,0,0,382,383,5,48,0,0,383,385,7,0,
  	0,0,384,386,7,1,0,0,385,384,1,0,0,0,386,387,1,0,0,0,387,385,1,0,0,0,387,
  	388,1,0,0,0,388,104,1,0,0,0,389,393,3,113,56,0,390,392,3,173,86,0,391,
  	390,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,0,394,106,1,
  	0,0,0,395,393,1,0,0,0,396,400,5,48,0,0,397,399,3,115,57,0,398,397,1,0,
  	0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,108,1,0,0,0,402,
  	400,1,0,0,0,403,405,3,111,55,0,404,406,3,117,58,0,405,404,1,0,0,0,406,
  	407,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,110,1,0,0,0,409,410,5,
  	48,0,0,410,411,7,2,0,0,411,112,1,0,0,0,412,413,7,3,0,0,413,114,1,0,0,
  	0,414,415,7,4,0,0,415,116,1,0,0,0,416,417,7,5,0,0,417,118,1,0,0,0,418,
  	420,3,121,60,0,419,421,3,123,61,0,420,419,1,0,0,0,420,421,1,0,0,0,421,
  	434,1,0,0,0,422,423,3,121,60,0,423,424,3,125,62,0,424,434,1,0,0,0,425,
  	427,3,123,61,0,426,428,3,121,60,0,427,426,1,0,0,0,427,428,1,0,0,0,428,
  	434,1,0,0,0,429,431,3,125,62,0,430,432,3,121,60,0,431,430,1,0,0,0,431,
  	432,1,0,0,0,432,434,1,0,0,0,433,418,1,0,0,0,433,422,1,0,0,0,433,425,1,
  	0,0,0,433,429,1,0,0,0,434,120,1,0,0,0,435,436,7,6,0,0,436,122,1,0,0,0,
  	437,438,7,7,0,0,438,124,1,0,0,0,439,440,5,108,0,0,440,444,5,108,0,0,441,
  	442,5,76,0,0,442,444,5,76,0,0,443,439,1,0,0,0,443,441,1,0,0,0,444,126,
  	1,0,0,0,445,448,3,129,64,0,446,448,3,131,65,0,447,445,1,0,0,0,447,446,
  	1,0,0,0,448,128,1,0,0,0,449,451,3,133,66,0,450,452,3,135,67,0,451,450,
  	1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,455,3,147,73,0,454,453,1,
  	0,0,0,454,455,1,0,0,0,455,462,1,0,0,0,456,457,3,139,69,0,457,459,3,135,
  	67,0,458,460,3,147,73,0,459,458,1,0,0,0,459,460,1,0,0,0,460,462,1,0,0,
  	0,461,449,1,0,0,0,461,456,1,0,0,0,462,130,1,0,0,0,463,466,3,111,55,0,
  	464,467,3,141,70,0,465,467,3,145,72,0,466,464,1,0,0,0,466,465,1,0,0,0,
  	467,468,1,0,0,0,468,470,3,143,71,0,469,471,3,147,73,0,470,469,1,0,0,0,
  	470,471,1,0,0,0,471,132,1,0,0,0,472,474,3,139,69,0,473,472,1,0,0,0,473,
  	474,1,0,0,0,474,475,1,0,0,0,475,476,5,46,0,0,476,481,3,139,69,0,477,478,
  	3,139,69,0,478,479,5,46,0,0,479,481,1,0,0,0,480,473,1,0,0,0,480,477,1,
  	0,0,0,481,134,1,0,0,0,482,484,7,8,0,0,483,485,3,137,68,0,484,483,1,0,
  	0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,487,3,139,69,0,487,136,1,0,0,
  	0,488,489,7,9,0,0,489,138,1,0,0,0,490,492,3,173,86,0,491,490,1,0,0,0,
  	492,493,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,140,1,0,0,0,495,497,
  	3,145,72,0,496,495,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,499,5,
  	46,0,0,499,504,3,145,72,0,500,501,3,145,72,0,501,502,5,46,0,0,502,504,
  	1,0,0,0,503,496,1,0,0,0,503,500,1,0,0,0,504,142,1,0,0,0,505,507,7,10,
  	0,0,506,508,3,137,68,0,507,506,1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,
  	0,509,510,3,139,69,0,510,144,1,0,0,0,511,513,3,117,58,0,512,511,1,0,0,
  	0,513,514,1,0,0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,146,1,0,0,0,516,
  	517,7,11,0,0,517,148,1,0,0,0,518,519,5,39,0,0,519,520,3,151,75,0,520,
  	521,5,39,0,0,521,541,1,0,0,0,522,523,5,76,0,0,523,524,5,39,0,0,524,525,
  	1,0,0,0,525,526,3,151,75,0,526,527,5,39,0,0,527,541,1,0,0,0,528,529,5,
  	117,0,0,529,530,5,39,0,0,530,531,1,0,0,0,531,532,3,151,75,0,532,533,5,
  	39,0,0,533,541,1,0,0,0,534,535,5,85,0,0,535,536,5,39,0,0,536,537,1,0,
  	0,0,537,538,3,151,75,0,538,539,5,39,0,0,539,541,1,0,0,0,540,518,1,0,0,
  	0,540,522,1,0,0,0,540,528,1,0,0,0,540,534,1,0,0,0,541,150,1,0,0,0,542,
  	544,3,153,76,0,543,542,1,0,0,0,544,545,1,0,0,0,545,543,1,0,0,0,545,546,
  	1,0,0,0,546,152,1,0,0,0,547,550,8,12,0,0,548,550,3,155,77,0,549,547,1,
  	0,0,0,549,548,1,0,0,0,550,154,1,0,0,0,551,555,3,157,78,0,552,555,3,159,
  	79,0,553,555,3,161,80,0,554,551,1,0,0,0,554,552,1,0,0,0,554,553,1,0,0,
  	0,555,156,1,0,0,0,556,557,5,92,0,0,557,558,7,13,0,0,558,158,1,0,0,0,559,
  	560,5,92,0,0,560,562,3,115,57,0,561,563,3,115,57,0,562,561,1,0,0,0,562,
  	563,1,0,0,0,563,565,1,0,0,0,564,566,3,115,57,0,565,564,1,0,0,0,565,566,
  	1,0,0,0,566,160,1,0,0,0,567,568,5,92,0,0,568,569,5,120,0,0,569,571,1,
  	0,0,0,570,572,3,117,58,0,571,570,1,0,0,0,572,573,1,0,0,0,573,571,1,0,
  	0,0,573,574,1,0,0,0,574,162,1,0,0,0,575,576,5,117,0,0,576,579,5,56,0,
  	0,577,579,7,14,0,0,578,575,1,0,0,0,578,577,1,0,0,0,579,164,1,0,0,0,580,
  	582,3,167,83,0,581,580,1,0,0,0,582,583,1,0,0,0,583,581,1,0,0,0,583,584,
  	1,0,0,0,584,166,1,0,0,0,585,593,8,15,0,0,586,593,3,155,77,0,587,588,5,
  	92,0,0,588,593,5,10,0,0,589,590,5,92,0,0,590,591,5,13,0,0,591,593,5,10,
  	0,0,592,585,1,0,0,0,592,586,1,0,0,0,592,587,1,0,0,0,592,589,1,0,0,0,593,
  	168,1,0,0,0,594,596,3,173,86,0,595,594,1,0,0,0,596,597,1,0,0,0,597,595,
  	1,0,0,0,597,598,1,0,0,0,598,170,1,0,0,0,599,600,7,16,0,0,600,172,1,0,
  	0,0,601,602,7,17,0,0,602,174,1,0,0,0,603,604,5,112,0,0,604,605,5,117,
  	0,0,605,606,5,98,0,0,606,607,5,108,0,0,607,608,5,105,0,0,608,609,5,99,
  	0,0,609,176,1,0,0,0,610,611,5,112,0,0,611,612,5,114,0,0,612,613,5,105,
  	0,0,613,614,5,118,0,0,614,615,5,97,0,0,615,616,5,116,0,0,616,617,5,101,
  	0,0,617,178,1,0,0,0,618,619,5,105,0,0,619,620,5,110,0,0,620,621,5,116,
  	0,0,621,622,5,101,0,0,622,623,5,114,0,0,623,624,5,102,0,0,624,625,5,97,
  	0,0,625,626,5,99,0,0,626,627,5,101,0,0,627,180,1,0,0,0,628,629,5,99,0,
  	0,629,630,5,108,0,0,630,631,5,97,0,0,631,632,5,115,0,0,632,633,5,115,
  	0,0,633,182,1,0,0,0,634,635,5,101,0,0,635,636,5,110,0,0,636,637,5,117,
  	0,0,637,638,5,109,0,0,638,184,1,0,0,0,639,640,5,117,0,0,640,641,5,115,
  	0,0,641,642,5,105,0,0,642,643,5,110,0,0,643,644,5,103,0,0,644,186,1,0,
  	0,0,645,646,5,110,0,0,646,647,5,97,0,0,647,648,5,109,0,0,648,649,5,101,
  	0,0,649,650,5,115,0,0,650,651,5,112,0,0,651,652,5,97,0,0,652,653,5,99,
  	0,0,653,654,5,101,0,0,654,188,1,0,0,0,655,656,5,105,0,0,656,657,5,110,
  	0,0,657,658,5,108,0,0,658,659,5,105,0,0,659,660,5,110,0,0,660,661,5,101,
  	0,0,661,190,1,0,0,0,662,663,5,110,0,0,663,664,5,111,0,0,664,665,5,101,
  	0,0,665,666,5,120,0,0,666,667,5,99,0,0,667,668,5,101,0,0,668,669,5,112,
  	0,0,669,670,5,116,0,0,670,192,1,0,0,0,671,672,5,117,0,0,672,673,5,115,
  	0,0,673,674,5,101,0,0,674,194,1,0,0,0,675,676,5,99,0,0,676,677,5,111,
  	0,0,677,678,5,109,0,0,678,679,5,112,0,0,679,680,5,105,0,0,680,681,5,108,
  	0,0,681,682,5,101,0,0,682,683,5,95,0,0,683,684,5,105,0,0,684,685,5,102,
  	0,0,685,196,1,0,0,0,686,687,5,115,0,0,687,688,5,116,0,0,688,689,5,97,
  	0,0,689,690,5,116,0,0,690,691,5,105,0,0,691,692,5,99,0,0,692,198,1,0,
  	0,0,693,694,5,101,0,0,694,695,5,120,0,0,695,696,5,116,0,0,696,697,5,101,
  	0,0,697,698,5,114,0,0,698,699,5,110,0,0,699,200,1,0,0,0,700,701,5,99,
  	0,0,701,702,5,111,0,0,702,703,5,110,0,0,703,704,5,115,0,0,704,705,5,116,
  	0,0,705,706,5,101,0,0,706,707,5,120,0,0,707,708,5,112,0,0,708,709,5,114,
  	0,0,709,202,1,0,0,0,710,711,5,99,0,0,711,712,5,111,0,0,712,713,5,110,
  	0,0,713,714,5,115,0,0,714,715,5,116,0,0,715,716,5,101,0,0,716,717,5,118,
  	0,0,717,718,5,97,0,0,718,719,5,108,0,0,719,204,1,0,0,0,720,721,5,100,
  	0,0,721,722,5,121,0,0,722,723,5,110,0,0,723,724,5,97,0,0,724,725,5,109,
  	0,0,725,726,5,105,0,0,726,727,5,99,0,0,727,728,5,95,0,0,728,729,5,99,
  	0,0,729,730,5,97,0,0,730,731,5,115,0,0,731,732,5,116,0,0,732,206,1,0,
  	0,0,733,734,5,118,0,0,734,735,5,111,0,0,735,736,5,105,0,0,736,737,5,100,
  	0,0,737,208,1,0,0,0,738,739,5,97,0,0,739,740,5,117,0,0,740,741,5,116,
  	0,0,741,742,5,111,0,0,742,210,1,0,0,0,743,744,5,99,0,0,744,745,5,104,
  	0,0,745,746,5,97,0,0,746,747,5,114,0,0,747,212,1,0,0,0,748,749,5,98,0,
  	0,749,750,5,111,0,0,750,751,5,111,0,0,751,752,5,108,0,0,752,214,1,0,0,
  	0,753,754,5,115,0,0,754,755,5,104,0,0,755,756,5,111,0,0,756,757,5,114,
  	0,0,757,758,5,116,0,0,758,216,1,0,0,0,759,760,5,105,0,0,760,761,5,110,
  	0,0,761,762,5,116,0,0,762,218,1,0,0,0,763,764,5,108,0,0,764,765,5,111,
  	0,0,765,766,5,110,0,0,766,767,5,103,0,0,767,220,1,0,0,0,768,769,5,102,
  	0,0,769,770,5,108,0,0,770,771,5,111,0,0,771,772,5,97,0,0,772,773,5,116,
  	0,0,773,222,1,0,0,0,774,775,5,100,0,0,775,776,5,111,0,0,776,777,5,117,
  	0,0,777,778,5,98,0,0,778,779,5,108,0,0,779,780,5,101,0,0,780,224,1,0,
  	0,0,781,782,5,100,0,0,782,783,5,111,0,0,783,784,5,117,0,0,784,785,5,98,
  	0,0,785,786,5,108,0,0,786,787,5,101,0,0,787,788,5,49,0,0,788,789,5,50,
  	0,0,789,790,5,56,0,0,790,226,1,0,0,0,791,792,5,117,0,0,792,793,5,110,
  	0,0,793,794,5,115,0,0,794,795,5,105,0,0,795,796,5,103,0,0,796,797,5,110,
  	0,0,797,798,5,101,0,0,798,799,5,100,0,0,799,228,1,0,0,0,800,801,5,99,
  	0,0,801,802,5,111,0,0,802,803,5,110,0,0,803,804,5,115,0,0,804,805,5,116,
  	0,0,805,230,1,0,0,0,806,807,5,118,0,0,807,808,5,111,0,0,808,809,5,108,
  	0,0,809,810,5,97,0,0,810,811,5,116,0,0,811,812,5,105,0,0,812,813,5,108,
  	0,0,813,814,5,101,0,0,814,232,1,0,0,0,40,0,369,373,377,380,387,393,400,
  	407,420,427,431,433,443,447,451,454,459,461,466,470,473,480,484,493,496,
  	503,507,514,540,545,549,554,562,565,573,578,583,592,597,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  ctclexerLexerStaticData = staticData.release();
}

}

ctcLexer::ctcLexer(CharStream *input) : Lexer(input) {
  ctcLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *ctclexerLexerStaticData->atn, ctclexerLexerStaticData->decisionToDFA, ctclexerLexerStaticData->sharedContextCache);
}

ctcLexer::~ctcLexer() {
  delete _interpreter;
}

std::string ctcLexer::getGrammarFileName() const {
  return "ctc.g4";
}

const std::vector<std::string>& ctcLexer::getRuleNames() const {
  return ctclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& ctcLexer::getChannelNames() const {
  return ctclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& ctcLexer::getModeNames() const {
  return ctclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& ctcLexer::getVocabulary() const {
  return ctclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ctcLexer::getSerializedATN() const {
  return ctclexerLexerStaticData->serializedATN;
}

const atn::ATN& ctcLexer::getATN() const {
  return *ctclexerLexerStaticData->atn;
}




void ctcLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  ctclexerLexerInitialize();
#else
  ::antlr4::internal::call_once(ctclexerLexerOnceFlag, ctclexerLexerInitialize);
#endif
}
