
// Generated from ctc.g4 by ANTLR 4.13.1


#include "ctcLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CtcLexerStaticData final {
  CtcLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CtcLexerStaticData(const CtcLexerStaticData&) = delete;
  CtcLexerStaticData(CtcLexerStaticData&&) = delete;
  CtcLexerStaticData& operator=(const CtcLexerStaticData&) = delete;
  CtcLexerStaticData& operator=(CtcLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag ctclexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CtcLexerStaticData *ctclexerLexerStaticData = nullptr;

void ctclexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (ctclexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(ctclexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CtcLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
      "T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", 
      "T__57", "T__58", "T__59", "T__60", "T__61", "T__62", "T__63", "T__64", 
      "T__65", "T__66", "T__67", "T__68", "T__69", "T__70", "T__71", "T__72", 
      "T__73", "T__74", "T__75", "T__76", "T__77", "T__78", "T__79", "IntegerConstant", 
      "BinaryConstant", "DecimalConstant", "OctalConstant", "HexadecimalConstant", 
      "HexadecimalPrefix", "NonzeroDigit", "OctalDigit", "HexadecimalDigit", 
      "IntegerSuffix", "UnsignedSuffix", "LongSuffix", "LongLongSuffix", 
      "FloatingConstant", "DecimalFloatingConstant", "HexadecimalFloatingConstant", 
      "FractionalConstant", "ExponentPart", "Sign", "DigitSequence", "HexadecimalFractionalConstant", 
      "BinaryExponentPart", "HexadecimalDigitSequence", "FloatingSuffix", 
      "CharacterConstant", "CCharSequence", "CChar", "EscapeSequence", "SimpleEscapeSequence", 
      "OctalEscapeSequence", "HexadecimalEscapeSequence", "EncodingPrefix", 
      "SCharSequence", "SChar", "Digit_sequence", "Identifier_non_digit", 
      "Digit"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'public'", "'private'", "'('", "')'", "';'", "'interface'", "'{'", 
      "'}'", "'class'", "','", "'enum'", "'using'", "'namespace'", "'inline'", 
      "'noexcept'", "'use'", "'!'", "'compile_if'", "'<'", "'>'", "'static'", 
      "'extern'", "'constexpr'", "'consteval'", "'&'", "'this'", "'['", 
      "']'", "'fun'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<<'", "'>>'", 
      "'<='", "'>='", "'=='", "'!='", "'^'", "'|'", "'&&'", "'||'", "'\\u003F'", 
      "':'", "'\"'", "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
      "'>>='", "'&='", "'^='", "'|='", "'.'", "'->'", "'++'", "'--'", "'~'", 
      "'dynamic_cast'", "'sizeof'", "'void'", "'auto'", "'char'", "'bool'", 
      "'short'", "'int'", "'long'", "'float'", "'double'", "'double128'", 
      "'const'", "'volatile'", "'**'", "'unsigned'", "'::'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "DigitSequence", 
      "Digit_sequence"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,82,820,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
  	1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
  	7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,
  	11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
  	12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
  	14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,
  	17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,
  	20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
  	22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,
  	28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,
  	34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,
  	39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,
  	44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,
  	50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,
  	54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,59,1,
  	59,1,59,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,63,1,63,1,63,1,63,1,
  	63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,
  	64,1,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,
  	67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,
  	70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,
  	72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,
  	74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,
  	76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,
  	78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,3,80,587,8,80,1,80,1,80,3,80,591,
  	8,80,1,80,1,80,3,80,595,8,80,1,80,3,80,598,8,80,1,81,1,81,1,81,4,81,603,
  	8,81,11,81,12,81,604,1,82,1,82,5,82,609,8,82,10,82,12,82,612,9,82,1,83,
  	1,83,5,83,616,8,83,10,83,12,83,619,9,83,1,84,1,84,4,84,623,8,84,11,84,
  	12,84,624,1,85,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,89,3,89,
  	638,8,89,1,89,1,89,1,89,1,89,1,89,3,89,645,8,89,1,89,1,89,3,89,649,8,
  	89,3,89,651,8,89,1,90,1,90,1,91,1,91,1,92,1,92,1,92,1,92,3,92,661,8,92,
  	1,93,1,93,3,93,665,8,93,1,94,1,94,3,94,669,8,94,1,94,3,94,672,8,94,1,
  	94,1,94,1,94,3,94,677,8,94,3,94,679,8,94,1,95,1,95,1,95,3,95,684,8,95,
  	1,95,1,95,3,95,688,8,95,1,96,3,96,691,8,96,1,96,1,96,1,96,1,96,1,96,3,
  	96,698,8,96,1,97,1,97,3,97,702,8,97,1,97,1,97,1,98,1,98,1,99,4,99,709,
  	8,99,11,99,12,99,710,1,100,3,100,714,8,100,1,100,1,100,1,100,1,100,1,
  	100,3,100,721,8,100,1,101,1,101,3,101,725,8,101,1,101,1,101,1,102,4,102,
  	730,8,102,11,102,12,102,731,1,103,1,103,1,104,1,104,1,104,1,104,1,104,
  	1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,1,104,
  	1,104,1,104,1,104,1,104,1,104,3,104,758,8,104,1,105,4,105,761,8,105,11,
  	105,12,105,762,1,106,1,106,3,106,767,8,106,1,107,1,107,1,107,3,107,772,
  	8,107,1,108,1,108,1,108,1,109,1,109,1,109,3,109,780,8,109,1,109,3,109,
  	783,8,109,1,110,1,110,1,110,1,110,4,110,789,8,110,11,110,12,110,790,1,
  	111,1,111,1,111,3,111,796,8,111,1,112,4,112,799,8,112,11,112,12,112,800,
  	1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,810,8,113,1,114,4,114,
  	813,8,114,11,114,12,114,814,1,115,1,115,1,116,1,116,0,0,117,1,1,3,2,5,
  	3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
  	55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
  	39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
  	101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
  	121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,
  	141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,
  	161,0,163,0,165,0,167,0,169,0,171,0,173,0,175,0,177,0,179,0,181,0,183,
  	0,185,0,187,0,189,0,191,0,193,0,195,0,197,0,199,81,201,0,203,0,205,0,
  	207,0,209,0,211,0,213,0,215,0,217,0,219,0,221,0,223,0,225,0,227,0,229,
  	82,231,0,233,0,1,0,18,2,0,66,66,98,98,1,0,48,49,2,0,88,88,120,120,1,0,
  	49,57,1,0,48,55,3,0,48,57,65,70,97,102,2,0,85,85,117,117,2,0,76,76,108,
  	108,2,0,69,69,101,101,2,0,43,43,45,45,2,0,80,80,112,112,4,0,70,70,76,
  	76,102,102,108,108,4,0,10,10,13,13,39,39,92,92,10,0,34,34,39,39,63,63,
  	92,92,97,98,102,102,110,110,114,114,116,116,118,118,3,0,76,76,85,85,117,
  	117,4,0,10,10,13,13,34,34,92,92,3,0,65,90,95,95,97,122,1,0,48,57,832,
  	0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
  	0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
  	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
  	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
  	0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
  	0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
  	1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
  	0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
  	0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
  	1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
  	1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
  	1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,
  	1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,
  	1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,
  	1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,
  	1,0,0,0,0,159,1,0,0,0,0,199,1,0,0,0,0,229,1,0,0,0,1,235,1,0,0,0,3,242,
  	1,0,0,0,5,250,1,0,0,0,7,252,1,0,0,0,9,254,1,0,0,0,11,256,1,0,0,0,13,266,
  	1,0,0,0,15,268,1,0,0,0,17,270,1,0,0,0,19,276,1,0,0,0,21,278,1,0,0,0,23,
  	283,1,0,0,0,25,289,1,0,0,0,27,299,1,0,0,0,29,306,1,0,0,0,31,315,1,0,0,
  	0,33,319,1,0,0,0,35,321,1,0,0,0,37,332,1,0,0,0,39,334,1,0,0,0,41,336,
  	1,0,0,0,43,343,1,0,0,0,45,350,1,0,0,0,47,360,1,0,0,0,49,370,1,0,0,0,51,
  	372,1,0,0,0,53,377,1,0,0,0,55,379,1,0,0,0,57,381,1,0,0,0,59,385,1,0,0,
  	0,61,387,1,0,0,0,63,389,1,0,0,0,65,391,1,0,0,0,67,393,1,0,0,0,69,395,
  	1,0,0,0,71,398,1,0,0,0,73,401,1,0,0,0,75,404,1,0,0,0,77,407,1,0,0,0,79,
  	410,1,0,0,0,81,413,1,0,0,0,83,415,1,0,0,0,85,417,1,0,0,0,87,420,1,0,0,
  	0,89,423,1,0,0,0,91,425,1,0,0,0,93,427,1,0,0,0,95,429,1,0,0,0,97,431,
  	1,0,0,0,99,434,1,0,0,0,101,437,1,0,0,0,103,440,1,0,0,0,105,443,1,0,0,
  	0,107,446,1,0,0,0,109,450,1,0,0,0,111,454,1,0,0,0,113,457,1,0,0,0,115,
  	460,1,0,0,0,117,463,1,0,0,0,119,465,1,0,0,0,121,468,1,0,0,0,123,471,1,
  	0,0,0,125,474,1,0,0,0,127,476,1,0,0,0,129,489,1,0,0,0,131,496,1,0,0,0,
  	133,501,1,0,0,0,135,506,1,0,0,0,137,511,1,0,0,0,139,516,1,0,0,0,141,522,
  	1,0,0,0,143,526,1,0,0,0,145,531,1,0,0,0,147,537,1,0,0,0,149,544,1,0,0,
  	0,151,554,1,0,0,0,153,560,1,0,0,0,155,569,1,0,0,0,157,572,1,0,0,0,159,
  	581,1,0,0,0,161,597,1,0,0,0,163,599,1,0,0,0,165,606,1,0,0,0,167,613,1,
  	0,0,0,169,620,1,0,0,0,171,626,1,0,0,0,173,629,1,0,0,0,175,631,1,0,0,0,
  	177,633,1,0,0,0,179,650,1,0,0,0,181,652,1,0,0,0,183,654,1,0,0,0,185,660,
  	1,0,0,0,187,664,1,0,0,0,189,678,1,0,0,0,191,680,1,0,0,0,193,697,1,0,0,
  	0,195,699,1,0,0,0,197,705,1,0,0,0,199,708,1,0,0,0,201,720,1,0,0,0,203,
  	722,1,0,0,0,205,729,1,0,0,0,207,733,1,0,0,0,209,757,1,0,0,0,211,760,1,
  	0,0,0,213,766,1,0,0,0,215,771,1,0,0,0,217,773,1,0,0,0,219,776,1,0,0,0,
  	221,784,1,0,0,0,223,795,1,0,0,0,225,798,1,0,0,0,227,809,1,0,0,0,229,812,
  	1,0,0,0,231,816,1,0,0,0,233,818,1,0,0,0,235,236,5,112,0,0,236,237,5,117,
  	0,0,237,238,5,98,0,0,238,239,5,108,0,0,239,240,5,105,0,0,240,241,5,99,
  	0,0,241,2,1,0,0,0,242,243,5,112,0,0,243,244,5,114,0,0,244,245,5,105,0,
  	0,245,246,5,118,0,0,246,247,5,97,0,0,247,248,5,116,0,0,248,249,5,101,
  	0,0,249,4,1,0,0,0,250,251,5,40,0,0,251,6,1,0,0,0,252,253,5,41,0,0,253,
  	8,1,0,0,0,254,255,5,59,0,0,255,10,1,0,0,0,256,257,5,105,0,0,257,258,5,
  	110,0,0,258,259,5,116,0,0,259,260,5,101,0,0,260,261,5,114,0,0,261,262,
  	5,102,0,0,262,263,5,97,0,0,263,264,5,99,0,0,264,265,5,101,0,0,265,12,
  	1,0,0,0,266,267,5,123,0,0,267,14,1,0,0,0,268,269,5,125,0,0,269,16,1,0,
  	0,0,270,271,5,99,0,0,271,272,5,108,0,0,272,273,5,97,0,0,273,274,5,115,
  	0,0,274,275,5,115,0,0,275,18,1,0,0,0,276,277,5,44,0,0,277,20,1,0,0,0,
  	278,279,5,101,0,0,279,280,5,110,0,0,280,281,5,117,0,0,281,282,5,109,0,
  	0,282,22,1,0,0,0,283,284,5,117,0,0,284,285,5,115,0,0,285,286,5,105,0,
  	0,286,287,5,110,0,0,287,288,5,103,0,0,288,24,1,0,0,0,289,290,5,110,0,
  	0,290,291,5,97,0,0,291,292,5,109,0,0,292,293,5,101,0,0,293,294,5,115,
  	0,0,294,295,5,112,0,0,295,296,5,97,0,0,296,297,5,99,0,0,297,298,5,101,
  	0,0,298,26,1,0,0,0,299,300,5,105,0,0,300,301,5,110,0,0,301,302,5,108,
  	0,0,302,303,5,105,0,0,303,304,5,110,0,0,304,305,5,101,0,0,305,28,1,0,
  	0,0,306,307,5,110,0,0,307,308,5,111,0,0,308,309,5,101,0,0,309,310,5,120,
  	0,0,310,311,5,99,0,0,311,312,5,101,0,0,312,313,5,112,0,0,313,314,5,116,
  	0,0,314,30,1,0,0,0,315,316,5,117,0,0,316,317,5,115,0,0,317,318,5,101,
  	0,0,318,32,1,0,0,0,319,320,5,33,0,0,320,34,1,0,0,0,321,322,5,99,0,0,322,
  	323,5,111,0,0,323,324,5,109,0,0,324,325,5,112,0,0,325,326,5,105,0,0,326,
  	327,5,108,0,0,327,328,5,101,0,0,328,329,5,95,0,0,329,330,5,105,0,0,330,
  	331,5,102,0,0,331,36,1,0,0,0,332,333,5,60,0,0,333,38,1,0,0,0,334,335,
  	5,62,0,0,335,40,1,0,0,0,336,337,5,115,0,0,337,338,5,116,0,0,338,339,5,
  	97,0,0,339,340,5,116,0,0,340,341,5,105,0,0,341,342,5,99,0,0,342,42,1,
  	0,0,0,343,344,5,101,0,0,344,345,5,120,0,0,345,346,5,116,0,0,346,347,5,
  	101,0,0,347,348,5,114,0,0,348,349,5,110,0,0,349,44,1,0,0,0,350,351,5,
  	99,0,0,351,352,5,111,0,0,352,353,5,110,0,0,353,354,5,115,0,0,354,355,
  	5,116,0,0,355,356,5,101,0,0,356,357,5,120,0,0,357,358,5,112,0,0,358,359,
  	5,114,0,0,359,46,1,0,0,0,360,361,5,99,0,0,361,362,5,111,0,0,362,363,5,
  	110,0,0,363,364,5,115,0,0,364,365,5,116,0,0,365,366,5,101,0,0,366,367,
  	5,118,0,0,367,368,5,97,0,0,368,369,5,108,0,0,369,48,1,0,0,0,370,371,5,
  	38,0,0,371,50,1,0,0,0,372,373,5,116,0,0,373,374,5,104,0,0,374,375,5,105,
  	0,0,375,376,5,115,0,0,376,52,1,0,0,0,377,378,5,91,0,0,378,54,1,0,0,0,
  	379,380,5,93,0,0,380,56,1,0,0,0,381,382,5,102,0,0,382,383,5,117,0,0,383,
  	384,5,110,0,0,384,58,1,0,0,0,385,386,5,42,0,0,386,60,1,0,0,0,387,388,
  	5,47,0,0,388,62,1,0,0,0,389,390,5,37,0,0,390,64,1,0,0,0,391,392,5,43,
  	0,0,392,66,1,0,0,0,393,394,5,45,0,0,394,68,1,0,0,0,395,396,5,60,0,0,396,
  	397,5,60,0,0,397,70,1,0,0,0,398,399,5,62,0,0,399,400,5,62,0,0,400,72,
  	1,0,0,0,401,402,5,60,0,0,402,403,5,61,0,0,403,74,1,0,0,0,404,405,5,62,
  	0,0,405,406,5,61,0,0,406,76,1,0,0,0,407,408,5,61,0,0,408,409,5,61,0,0,
  	409,78,1,0,0,0,410,411,5,33,0,0,411,412,5,61,0,0,412,80,1,0,0,0,413,414,
  	5,94,0,0,414,82,1,0,0,0,415,416,5,124,0,0,416,84,1,0,0,0,417,418,5,38,
  	0,0,418,419,5,38,0,0,419,86,1,0,0,0,420,421,5,124,0,0,421,422,5,124,0,
  	0,422,88,1,0,0,0,423,424,5,63,0,0,424,90,1,0,0,0,425,426,5,58,0,0,426,
  	92,1,0,0,0,427,428,5,34,0,0,428,94,1,0,0,0,429,430,5,61,0,0,430,96,1,
  	0,0,0,431,432,5,42,0,0,432,433,5,61,0,0,433,98,1,0,0,0,434,435,5,47,0,
  	0,435,436,5,61,0,0,436,100,1,0,0,0,437,438,5,37,0,0,438,439,5,61,0,0,
  	439,102,1,0,0,0,440,441,5,43,0,0,441,442,5,61,0,0,442,104,1,0,0,0,443,
  	444,5,45,0,0,444,445,5,61,0,0,445,106,1,0,0,0,446,447,5,60,0,0,447,448,
  	5,60,0,0,448,449,5,61,0,0,449,108,1,0,0,0,450,451,5,62,0,0,451,452,5,
  	62,0,0,452,453,5,61,0,0,453,110,1,0,0,0,454,455,5,38,0,0,455,456,5,61,
  	0,0,456,112,1,0,0,0,457,458,5,94,0,0,458,459,5,61,0,0,459,114,1,0,0,0,
  	460,461,5,124,0,0,461,462,5,61,0,0,462,116,1,0,0,0,463,464,5,46,0,0,464,
  	118,1,0,0,0,465,466,5,45,0,0,466,467,5,62,0,0,467,120,1,0,0,0,468,469,
  	5,43,0,0,469,470,5,43,0,0,470,122,1,0,0,0,471,472,5,45,0,0,472,473,5,
  	45,0,0,473,124,1,0,0,0,474,475,5,126,0,0,475,126,1,0,0,0,476,477,5,100,
  	0,0,477,478,5,121,0,0,478,479,5,110,0,0,479,480,5,97,0,0,480,481,5,109,
  	0,0,481,482,5,105,0,0,482,483,5,99,0,0,483,484,5,95,0,0,484,485,5,99,
  	0,0,485,486,5,97,0,0,486,487,5,115,0,0,487,488,5,116,0,0,488,128,1,0,
  	0,0,489,490,5,115,0,0,490,491,5,105,0,0,491,492,5,122,0,0,492,493,5,101,
  	0,0,493,494,5,111,0,0,494,495,5,102,0,0,495,130,1,0,0,0,496,497,5,118,
  	0,0,497,498,5,111,0,0,498,499,5,105,0,0,499,500,5,100,0,0,500,132,1,0,
  	0,0,501,502,5,97,0,0,502,503,5,117,0,0,503,504,5,116,0,0,504,505,5,111,
  	0,0,505,134,1,0,0,0,506,507,5,99,0,0,507,508,5,104,0,0,508,509,5,97,0,
  	0,509,510,5,114,0,0,510,136,1,0,0,0,511,512,5,98,0,0,512,513,5,111,0,
  	0,513,514,5,111,0,0,514,515,5,108,0,0,515,138,1,0,0,0,516,517,5,115,0,
  	0,517,518,5,104,0,0,518,519,5,111,0,0,519,520,5,114,0,0,520,521,5,116,
  	0,0,521,140,1,0,0,0,522,523,5,105,0,0,523,524,5,110,0,0,524,525,5,116,
  	0,0,525,142,1,0,0,0,526,527,5,108,0,0,527,528,5,111,0,0,528,529,5,110,
  	0,0,529,530,5,103,0,0,530,144,1,0,0,0,531,532,5,102,0,0,532,533,5,108,
  	0,0,533,534,5,111,0,0,534,535,5,97,0,0,535,536,5,116,0,0,536,146,1,0,
  	0,0,537,538,5,100,0,0,538,539,5,111,0,0,539,540,5,117,0,0,540,541,5,98,
  	0,0,541,542,5,108,0,0,542,543,5,101,0,0,543,148,1,0,0,0,544,545,5,100,
  	0,0,545,546,5,111,0,0,546,547,5,117,0,0,547,548,5,98,0,0,548,549,5,108,
  	0,0,549,550,5,101,0,0,550,551,5,49,0,0,551,552,5,50,0,0,552,553,5,56,
  	0,0,553,150,1,0,0,0,554,555,5,99,0,0,555,556,5,111,0,0,556,557,5,110,
  	0,0,557,558,5,115,0,0,558,559,5,116,0,0,559,152,1,0,0,0,560,561,5,118,
  	0,0,561,562,5,111,0,0,562,563,5,108,0,0,563,564,5,97,0,0,564,565,5,116,
  	0,0,565,566,5,105,0,0,566,567,5,108,0,0,567,568,5,101,0,0,568,154,1,0,
  	0,0,569,570,5,42,0,0,570,571,5,42,0,0,571,156,1,0,0,0,572,573,5,117,0,
  	0,573,574,5,110,0,0,574,575,5,115,0,0,575,576,5,105,0,0,576,577,5,103,
  	0,0,577,578,5,110,0,0,578,579,5,101,0,0,579,580,5,100,0,0,580,158,1,0,
  	0,0,581,582,5,58,0,0,582,583,5,58,0,0,583,160,1,0,0,0,584,586,3,165,82,
  	0,585,587,3,179,89,0,586,585,1,0,0,0,586,587,1,0,0,0,587,598,1,0,0,0,
  	588,590,3,167,83,0,589,591,3,179,89,0,590,589,1,0,0,0,590,591,1,0,0,0,
  	591,598,1,0,0,0,592,594,3,169,84,0,593,595,3,179,89,0,594,593,1,0,0,0,
  	594,595,1,0,0,0,595,598,1,0,0,0,596,598,3,163,81,0,597,584,1,0,0,0,597,
  	588,1,0,0,0,597,592,1,0,0,0,597,596,1,0,0,0,598,162,1,0,0,0,599,600,5,
  	48,0,0,600,602,7,0,0,0,601,603,7,1,0,0,602,601,1,0,0,0,603,604,1,0,0,
  	0,604,602,1,0,0,0,604,605,1,0,0,0,605,164,1,0,0,0,606,610,3,173,86,0,
  	607,609,3,233,116,0,608,607,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,
  	611,1,0,0,0,611,166,1,0,0,0,612,610,1,0,0,0,613,617,5,48,0,0,614,616,
  	3,175,87,0,615,614,1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,617,618,1,
  	0,0,0,618,168,1,0,0,0,619,617,1,0,0,0,620,622,3,171,85,0,621,623,3,177,
  	88,0,622,621,1,0,0,0,623,624,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,
  	625,170,1,0,0,0,626,627,5,48,0,0,627,628,7,2,0,0,628,172,1,0,0,0,629,
  	630,7,3,0,0,630,174,1,0,0,0,631,632,7,4,0,0,632,176,1,0,0,0,633,634,7,
  	5,0,0,634,178,1,0,0,0,635,637,3,181,90,0,636,638,3,183,91,0,637,636,1,
  	0,0,0,637,638,1,0,0,0,638,651,1,0,0,0,639,640,3,181,90,0,640,641,3,185,
  	92,0,641,651,1,0,0,0,642,644,3,183,91,0,643,645,3,181,90,0,644,643,1,
  	0,0,0,644,645,1,0,0,0,645,651,1,0,0,0,646,648,3,185,92,0,647,649,3,181,
  	90,0,648,647,1,0,0,0,648,649,1,0,0,0,649,651,1,0,0,0,650,635,1,0,0,0,
  	650,639,1,0,0,0,650,642,1,0,0,0,650,646,1,0,0,0,651,180,1,0,0,0,652,653,
  	7,6,0,0,653,182,1,0,0,0,654,655,7,7,0,0,655,184,1,0,0,0,656,657,5,108,
  	0,0,657,661,5,108,0,0,658,659,5,76,0,0,659,661,5,76,0,0,660,656,1,0,0,
  	0,660,658,1,0,0,0,661,186,1,0,0,0,662,665,3,189,94,0,663,665,3,191,95,
  	0,664,662,1,0,0,0,664,663,1,0,0,0,665,188,1,0,0,0,666,668,3,193,96,0,
  	667,669,3,195,97,0,668,667,1,0,0,0,668,669,1,0,0,0,669,671,1,0,0,0,670,
  	672,3,207,103,0,671,670,1,0,0,0,671,672,1,0,0,0,672,679,1,0,0,0,673,674,
  	3,199,99,0,674,676,3,195,97,0,675,677,3,207,103,0,676,675,1,0,0,0,676,
  	677,1,0,0,0,677,679,1,0,0,0,678,666,1,0,0,0,678,673,1,0,0,0,679,190,1,
  	0,0,0,680,683,3,171,85,0,681,684,3,201,100,0,682,684,3,205,102,0,683,
  	681,1,0,0,0,683,682,1,0,0,0,684,685,1,0,0,0,685,687,3,203,101,0,686,688,
  	3,207,103,0,687,686,1,0,0,0,687,688,1,0,0,0,688,192,1,0,0,0,689,691,3,
  	199,99,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,693,5,46,
  	0,0,693,698,3,199,99,0,694,695,3,199,99,0,695,696,5,46,0,0,696,698,1,
  	0,0,0,697,690,1,0,0,0,697,694,1,0,0,0,698,194,1,0,0,0,699,701,7,8,0,0,
  	700,702,3,197,98,0,701,700,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,703,
  	704,3,199,99,0,704,196,1,0,0,0,705,706,7,9,0,0,706,198,1,0,0,0,707,709,
  	3,233,116,0,708,707,1,0,0,0,709,710,1,0,0,0,710,708,1,0,0,0,710,711,1,
  	0,0,0,711,200,1,0,0,0,712,714,3,205,102,0,713,712,1,0,0,0,713,714,1,0,
  	0,0,714,715,1,0,0,0,715,716,5,46,0,0,716,721,3,205,102,0,717,718,3,205,
  	102,0,718,719,5,46,0,0,719,721,1,0,0,0,720,713,1,0,0,0,720,717,1,0,0,
  	0,721,202,1,0,0,0,722,724,7,10,0,0,723,725,3,197,98,0,724,723,1,0,0,0,
  	724,725,1,0,0,0,725,726,1,0,0,0,726,727,3,199,99,0,727,204,1,0,0,0,728,
  	730,3,177,88,0,729,728,1,0,0,0,730,731,1,0,0,0,731,729,1,0,0,0,731,732,
  	1,0,0,0,732,206,1,0,0,0,733,734,7,11,0,0,734,208,1,0,0,0,735,736,5,39,
  	0,0,736,737,3,211,105,0,737,738,5,39,0,0,738,758,1,0,0,0,739,740,5,76,
  	0,0,740,741,5,39,0,0,741,742,1,0,0,0,742,743,3,211,105,0,743,744,5,39,
  	0,0,744,758,1,0,0,0,745,746,5,117,0,0,746,747,5,39,0,0,747,748,1,0,0,
  	0,748,749,3,211,105,0,749,750,5,39,0,0,750,758,1,0,0,0,751,752,5,85,0,
  	0,752,753,5,39,0,0,753,754,1,0,0,0,754,755,3,211,105,0,755,756,5,39,0,
  	0,756,758,1,0,0,0,757,735,1,0,0,0,757,739,1,0,0,0,757,745,1,0,0,0,757,
  	751,1,0,0,0,758,210,1,0,0,0,759,761,3,213,106,0,760,759,1,0,0,0,761,762,
  	1,0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,212,1,0,0,0,764,767,8,12,
  	0,0,765,767,3,215,107,0,766,764,1,0,0,0,766,765,1,0,0,0,767,214,1,0,0,
  	0,768,772,3,217,108,0,769,772,3,219,109,0,770,772,3,221,110,0,771,768,
  	1,0,0,0,771,769,1,0,0,0,771,770,1,0,0,0,772,216,1,0,0,0,773,774,5,92,
  	0,0,774,775,7,13,0,0,775,218,1,0,0,0,776,777,5,92,0,0,777,779,3,175,87,
  	0,778,780,3,175,87,0,779,778,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,
  	781,783,3,175,87,0,782,781,1,0,0,0,782,783,1,0,0,0,783,220,1,0,0,0,784,
  	785,5,92,0,0,785,786,5,120,0,0,786,788,1,0,0,0,787,789,3,177,88,0,788,
  	787,1,0,0,0,789,790,1,0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,222,1,
  	0,0,0,792,793,5,117,0,0,793,796,5,56,0,0,794,796,7,14,0,0,795,792,1,0,
  	0,0,795,794,1,0,0,0,796,224,1,0,0,0,797,799,3,227,113,0,798,797,1,0,0,
  	0,799,800,1,0,0,0,800,798,1,0,0,0,800,801,1,0,0,0,801,226,1,0,0,0,802,
  	810,8,15,0,0,803,810,3,215,107,0,804,805,5,92,0,0,805,810,5,10,0,0,806,
  	807,5,92,0,0,807,808,5,13,0,0,808,810,5,10,0,0,809,802,1,0,0,0,809,803,
  	1,0,0,0,809,804,1,0,0,0,809,806,1,0,0,0,810,228,1,0,0,0,811,813,3,233,
  	116,0,812,811,1,0,0,0,813,814,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,0,
  	815,230,1,0,0,0,816,817,7,16,0,0,817,232,1,0,0,0,818,819,7,17,0,0,819,
  	234,1,0,0,0,40,0,586,590,594,597,604,610,617,624,637,644,648,650,660,
  	664,668,671,676,678,683,687,690,697,701,710,713,720,724,731,757,762,766,
  	771,779,782,790,795,800,809,814,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  ctclexerLexerStaticData = staticData.release();
}

}

ctcLexer::ctcLexer(CharStream *input) : Lexer(input) {
  ctcLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *ctclexerLexerStaticData->atn, ctclexerLexerStaticData->decisionToDFA, ctclexerLexerStaticData->sharedContextCache);
}

ctcLexer::~ctcLexer() {
  delete _interpreter;
}

std::string ctcLexer::getGrammarFileName() const {
  return "ctc.g4";
}

const std::vector<std::string>& ctcLexer::getRuleNames() const {
  return ctclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& ctcLexer::getChannelNames() const {
  return ctclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& ctcLexer::getModeNames() const {
  return ctclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& ctcLexer::getVocabulary() const {
  return ctclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ctcLexer::getSerializedATN() const {
  return ctclexerLexerStaticData->serializedATN;
}

const atn::ATN& ctcLexer::getATN() const {
  return *ctclexerLexerStaticData->atn;
}




void ctcLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  ctclexerLexerInitialize();
#else
  ::antlr4::internal::call_once(ctclexerLexerOnceFlag, ctclexerLexerInitialize);
#endif
}
